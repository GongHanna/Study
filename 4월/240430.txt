오전 : JAVA Script
        - prototype 객체
	1. 부모 객체의 속성, 메서드 등을 자식이 상속 받아 사용
	2. 재사용을 위해 주로 사용
	3. 부모 객체인 프로토타입을 동적으로 변경할 수 있음

        - Array.prototype.find();
	1. 제공된 배열에서 제공된 테스트 함수를 만족하는 첫 번째 요소를 반환
	2. 테스트 함수를 만족하는 값이 없으면 undefined가 반환
	3. 배열.find( (현재요소[, 현재 요소 인덱스, 호출된 배열]) => {} );
	4. 반환값 : 함수를 만족하는 배열의 첫 번째 요소. 없으면, undifined 반환

        - 얇은 복사 : 원본 객체와 같은 참조를 공유하는 복사. 
	원본이나 복사본을 변경하면, 다른 객체 또한 변경될 수 있음
        - 깊은 복사 : 복사본이 만들어진 원본 객체와 같은 참조를 공유하지 않는 복사. 
	원본이나 복사본을 변경할 때, 다른 객체가 변경되지 않는 것을 보장 

        - Array.prototype.filter();
	1. 주어진 배열의 일부에 대한 얕은 복사본을 생성하고, 함수에 의해 구현된 테스트를 통과한 요소로만 필터링
	2. 주어진 함수의 모든 요소를 모아 새로운 배열로 반환
	3. 배열.filter( (현재 요소[, 현재 요소 인덱스, 호출된 배열]) => {} );
	4. 반환 값 : 얇은 복사본(새로운 배열) 반환. false인 경우 빈 배열로 반환
	5. 원하는(작성한) 데이터만 빼고 배열로 반환했기 때문에 주로 데이터 삭제시 사용

        - Array.prototype.reduce();
	1. 배열의 각 요소에 대해 주어진 리듀서 (reducer) 함수를 실행하고, 하나의 결과값을 반환
	2. 리듀서 (reducer) 함수 : 누적하여 반환하는 함수
	3. 배열.reduce( (누산기, 현재값[, 현재 인덱스, 원본 배열]) => {} );
	4. 누산기 : 콜백의 반환값을 누적
	5. 초기값 : 최초 호출에서 첫 번째 인수에 제공. 
		초기값을 제공하지 않으면 배열의 첫 번째 요소 사용. 
		빈 배열에서 초기값 없이 reduce()를 호출하면 오류 발생.
	6. 반환 값 : 누적 계산의 결과 값.

        - Array.prototype.forEach();
	1. 각 배열 요소에 대해 제공된 함수를 한 번씩 실행
	2. 배열.forEach( (현재요소[, 인덱스]) => {} );
	3. 반환 값: 없음 undefined

        - Array.prototype.map();
	1. 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환
	2. 기존 배열은 수정하지 않음
	3. 배열.map( (현재요소[, 인덱스[, 배열]]) => {} );
	4. 반환 값 : callback의 결과를 모은 새로운 배열

오후 : JAVA Script
        - 배열 Ex1~6.html
        - spread 전개 구문
	1. 배열, 문자열, 객체 등을 복사해 반환
	2. 함수 호출 : myFn(...iterableObj);
	3. 배열 리터럴과 문자열 : [...iterableObj, "4", "five", 6];
	4. 객체 리터럴 : let objClone = { ...obj };