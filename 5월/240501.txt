오전 : JAVA Script
        - 배열Ex6.html / 현재 날짜와 시간 출력.

        - 재귀 함수 : 함수 내부에서 자기 자신을 호출하는 함수
	1. 재귀 함수 사용시 종료 조건을 설정하지 않으면 무한 호출 됨
	2. 내부적으로 호출 스택(call stack)을 사용하기 때문에 호출시 스택이 쌓이게 되고, 
	   각 호출이 종료되면 스택에서 제거됨
	3. 단점. 메모리 사용이 많음

        - .padStart(문자열 길이, '채워넣을문자');

        - DOM 객체-탐색
	1. id 속성 노드 탐색 document.getElementById('id')
	2. class 속성 노드 .getElementsByClassName('class');
	3. tag 노드 탐색 getElementsByTagName('tag');
	4. 표준 탐색 메서드 document.querySelector('id#, class. , tag'); 제일 처음 탐색한 노드 반환
	5. NodeList로 반환
	  - 배열은 아니지만 배열처럼 처리할 수 있는 객체로 숫자로 된 key와 length 프로퍼티(속성)가 있음
	  - NodeList는 .forEach()는 사용 가능

        - html 표준 정의 속성 접근
	1. data-사용자정의이름="" (data-color="", data-name="", data-size="")
	2. js 에서 접근 
	  - .dataset.사용자정의이름; 사용자 정의 속성에 접근 가능 (.dataset.color, .dataset.name, .dataset.size)

오후 : JAVA Script
        - class 제어
	1. .classList.add(); 클래스 속성 추가
	2. .classList.remove(); 클래스 속성 제거
	3. .classList.toggle(); .add(), .remove()의 반복
	   - .contains('클래스명'); 매개변수 안의 클래스 존재 여부를 true, false로 반환
	4. .className 속성. 클래스 값을 가져오거나 변경
	5. .classList.replace('현재클래스', '변경클래스');

        - 이벤트 전달
	1. 이벤트 버블링 bubbling : 자식 -> 부모 순으로 이벤트 전달. 주로 지원
	2. 이벤트 캡쳐링 capturing : 부모 -> 자식 순으로 이벤트 전달

        - 이벤트 제어
	1. .stopPropagation(); // 현재 이벤트가 상위 노드까지 전달되는 것을 방지(이벤트 버블링 방지)
	2. .preventDefault(); // 요소의 기본 성격 제거
	3. event.target // 실제 이벤트가 발생하는 요소를 반환. 이벤트 리스너가 등록되어 있는 자식 요소 반환
	4. evert.currentTarget // 이벤트 리스너가 있는 요소를 반환. 이벤트를 등록해 놓은 요소 반환(일반적으로는 버튼)
        - 자바스크립트 문제 만들기
